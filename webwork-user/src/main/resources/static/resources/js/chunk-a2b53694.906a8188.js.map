{"version":3,"sources":["webpack:///./src/views/Dictionary.vue","webpack:///./src/request/DictRequest.ts","webpack:///./src/views/Dictionary.vue?5f92","webpack:///./src/views/Dictionary.vue?c5d3","webpack:///./src/views/Dictionary.vue?9ec2"],"names":["style","href","class","load-data","onLoadData","tree-data","treeData","onSelect","title","trigger","overlay","menuKey","onContextMenuClick","node","key","rowKey","columns","data-source","dataList","rowClassName","pagination","handleTableChange","filterDropdown","ref","placeholder","column","value","selectedKeys","type","size","handleSearch","confirm","dataIndex","icon","handleReset","clearFilters","filterIcon","filtered","undefined","name","text","searchText","searchedColumn","fragment","i","toLowerCase","operation","record","length","parentId","onDictDel","onDictEdit","visible","modalVisible","handleOk","colon","model","formData","rules","label-col","wrapper-col","label","parentName","id","entity","pageable","BaseRequest","request","orderMap","ascend","descend","formRef","required","message","max","width","customRender","info","curr","index","slots","onFilterDropdownVisibleChange","setTimeout","searchInput","focus","sorter","total","current","pageSize","condition","listNodes","ret","code","error","msg","this","toTreeDataItem","data","pageQuery","treeNode","Promise","resolve","dataRef","children","then","currentTreeNode","console","log","nodes","map","callback","forEach","item","arr","loop","pageList","result","count","pag","filters","sortField","columnKey","sortOrder","order","Array","formUnref","validate","add","update","push","toTreeDataItemOne","catch","delete","splice","components","SearchOutlined","Group","render","__scopeId"],"mappings":"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","file":"resources/js/chunk-a2b53694.906a8188.js","sourcesContent":["<template>\r\n  <a-layout class=\"a-layout\">\r\n    <a-layout-sider class=\"a-layout-sider\" @contextmenu.prevent>\r\n      <a-tree\r\n        :load-data=\"onLoadData\"\r\n        :tree-data=\"treeData\"\r\n        @select=\"onSelect\"\r\n        style=\"height: 100%\"\r\n        @contextmenu.prevent\r\n      >\r\n        <template #title=\"node\">\r\n          <a-dropdown :trigger=\"['contextmenu']\">\r\n            <span @contextmenu.prevent>{{ node.title }}</span>\r\n            <template #overlay>\r\n              <a-menu\r\n                @click=\"({ key: menuKey }) => onContextMenuClick(node, menuKey)\"\r\n              >\r\n                <a-menu-item key=\"create_dict\">添加子级</a-menu-item>\r\n              </a-menu>\r\n            </template>\r\n          </a-dropdown>\r\n        </template>\r\n      </a-tree>\r\n    </a-layout-sider>\r\n    <a-layout-content class=\"a-layout-content\">\r\n      <a-table\r\n        class=\"ant-table-striped\"\r\n        rowKey=\"id\"\r\n        :columns=\"columns\"\r\n        :data-source=\"dataList\"\r\n        :rowClassName=\"\r\n          (record, index) => (index % 2 === 1 ? 'table-striped' : null)\r\n        \"\r\n        :pagination=\"pagination\"\r\n        @change=\"handleTableChange\"\r\n      >\r\n        <!-- 自定义筛选菜单 -->\r\n        <template\r\n          #filterDropdown=\"{\r\n            setSelectedKeys,\r\n            selectedKeys,\r\n            confirm,\r\n            clearFilters,\r\n            column\r\n          }\"\r\n        >\r\n          <div style=\"padding: 8px\">\r\n            <a-input\r\n              ref=\"searchInput\"\r\n              :placeholder=\"`搜索 ${column.title}`\"\r\n              :value=\"selectedKeys[0]\"\r\n              style=\"width: 188px; margin-bottom: 8px; display: block\"\r\n              @change=\"\r\n                (e) => setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n              \"\r\n              @pressEnter=\"\r\n                handleSearch(selectedKeys, confirm, column.dataIndex)\r\n              \"\r\n            />\r\n            <a-button\r\n              type=\"primary\"\r\n              size=\"small\"\r\n              style=\"width: 90px; margin-right: 8px\"\r\n              @click=\"handleSearch(selectedKeys, confirm, column.dataIndex)\"\r\n            >\r\n              <template #icon><SearchOutlined /></template>\r\n              查询\r\n            </a-button>\r\n            <a-button\r\n              size=\"small\"\r\n              style=\"width: 90px\"\r\n              @click=\"handleReset(clearFilters)\"\r\n            >\r\n              重置\r\n            </a-button>\r\n          </div>\r\n        </template>\r\n        <template #filterIcon=\"filtered\">\r\n          <search-outlined\r\n            :style=\"{ color: filtered ? '#108ee9' : undefined }\"\r\n          />\r\n        </template>\r\n        <template #name=\"{ text, column }\">\r\n          <span v-if=\"searchText && searchedColumn === column.dataIndex\">\r\n            <template\r\n              v-for=\"(fragment, i) in text\r\n                .toString()\r\n                .split(new RegExp(`(?<=${searchText})|(?=${searchText})`, 'i'))\"\r\n            >\r\n              <mark\r\n                v-if=\"fragment.toLowerCase() === searchText.toLowerCase()\"\r\n                class=\"highlight\"\r\n                :key=\"i\"\r\n              >\r\n                {{ fragment }}\r\n              </mark>\r\n              <template v-else>{{ fragment }}</template>\r\n            </template>\r\n          </span>\r\n          <template v-else>\r\n            {{ text }}\r\n          </template>\r\n        </template>\r\n        <!-- 操作列模板 -->\r\n        <template #operation=\"{ record }\">\r\n          <a-space>\r\n            <a-popconfirm\r\n              v-if=\"dataList.length && record.parentId\"\r\n              title=\"您确定要删除吗?\"\r\n              @confirm=\"onDictDel(record)\"\r\n            >\r\n              <a href=\"javascript:void(0);\">删除</a>\r\n            </a-popconfirm>\r\n            <a href=\"javascript:void(0);\" @click=\"onDictEdit(record)\">编辑</a>\r\n          </a-space>\r\n        </template>\r\n      </a-table>\r\n    </a-layout-content>\r\n  </a-layout>\r\n  <!-- 添加编辑Modal -->\r\n  <a-modal v-model:visible=\"modalVisible\" title=\"数据字典\" @ok=\"handleOk\">\r\n    <a-form\r\n      ref=\"formRef\"\r\n      :colon=\"false\"\r\n      :model=\"formData\"\r\n      :rules=\"rules\"\r\n      :label-col=\"{ span: 4 }\"\r\n      :wrapper-col=\"{ span: 18 }\"\r\n      style=\"margin-top: 15px\"\r\n    >\r\n      <a-form-item label=\"父节点\">\r\n        <template v-if=\"formData.parentName\">\r\n          {{ formData.parentName }}\r\n        </template>\r\n        <template v-else> 无 </template>\r\n      </a-form-item>\r\n      <a-form-item label=\"字典名\" name=\"name\">\r\n        <a-input v-model:value=\"formData.name\" />\r\n      </a-form-item>\r\n      <a-form-item label=\"字典值\" name=\"value\">\r\n        <a-input v-model:value=\"formData.value\" />\r\n      </a-form-item>\r\n    </a-form>\r\n  </a-modal>\r\n</template>\r\n<script lang=\"ts\">\r\nimport { ref, toRaw, unref } from 'vue'\r\nimport { Options, Vue } from 'vue-class-component'\r\nimport { message } from 'ant-design-vue'\r\nimport { TreeDataItem, SelectEvent } from 'ant-design-vue/es/tree/Tree'\r\nimport { SearchOutlined } from '@ant-design/icons-vue'\r\nimport {\r\n  TableState,\r\n  TableStateFilters\r\n} from 'ant-design-vue/es/table/interface'\r\nimport { TreeNode } from '@/types/TreeNode'\r\nimport request from '@/request/DictRequest'\r\nimport Pageable from '@/types/Pageable'\r\nimport { Dictionary } from '@/types/Dictionary'\r\nimport Group from './Group.vue'\r\nimport { R } from '@/types/R'\r\nimport { ValidateErrorEntity } from 'ant-design-vue/es/form/interface'\r\n\r\n// 分页数据类型\r\ntype Pagination = TableState['pagination']\r\n// 排序映射\r\nconst orderMap: { [key: string]: string } = {\r\n  ascend: 'ASC',\r\n  descend: 'DESC'\r\n}\r\n@Options({\r\n  components: {\r\n    SearchOutlined,\r\n    Group\r\n  }\r\n})\r\nexport default class DictionaryVue extends Vue {\r\n  // 权限树数据源\r\n  treeData: TreeDataItem[] = []\r\n  // 字典Modal显示属性\r\n  modalVisible = false\r\n  // 表单数据\r\n  formData: Dictionary = {}\r\n\r\n  // 表单引用\r\n  formRef = ref<AntType.Form>()\r\n  // 验证规则\r\n  rules = {\r\n    name: [\r\n      { required: true, message: '请输入字典名称', trigger: 'blur' },\r\n      { max: 50, message: '角色名称最多50个字符' }\r\n    ],\r\n    value: [{ max: 50, message: '字典值最多50个字符' }]\r\n  }\r\n\r\n  // 权限列定义\r\n  columns = [\r\n    {\r\n      title: '序号',\r\n      dataIndex: 'number',\r\n      width: 100,\r\n      customRender: (info: {\r\n        text: string;\r\n        record: Dictionary;\r\n        index: number;\r\n      }) => {\r\n        return (this.pageable.curr - 1) * this.pageable.size + info.index + 1\r\n      }\r\n    },\r\n    {\r\n      title: '名称',\r\n      dataIndex: 'name',\r\n      width: 220,\r\n      slots: {\r\n        filterDropdown: 'filterDropdown',\r\n        filterIcon: 'filterIcon',\r\n        customRender: 'name'\r\n      },\r\n      onFilterDropdownVisibleChange: (visible: boolean) => {\r\n        if (visible) {\r\n          setTimeout(() => {\r\n            const searchInput = unref(this.searchInput)\r\n            searchInput && searchInput.focus()\r\n          }, 0)\r\n        }\r\n      }\r\n    },\r\n    { title: '字典值', dataIndex: 'value' },\r\n    { title: '父节点', dataIndex: 'parentName', width: 200 },\r\n    {\r\n      title: '创建时间',\r\n      dataIndex: 'createTime',\r\n      width: 200,\r\n      sorter: true,\r\n      key: 'create_time'\r\n    },\r\n    {\r\n      title: '操作',\r\n      dataIndex: 'operation',\r\n      width: 100,\r\n      slots: { customRender: 'operation' }\r\n    }\r\n  ]\r\n\r\n  // 当前操作树节点\r\n  currentTreeNode!: TreeDataItem;\r\n\r\n  // 表格数据\r\n  dataList: Dictionary[] = []\r\n\r\n  // 搜索\r\n  searchInput = ref<HTMLInputElement>()\r\n  searchText = ''\r\n  searchedColumn = ''\r\n\r\n  // 分页参数定义\r\n  pagination = {\r\n    total: 200,\r\n    current: 1,\r\n    pageSize: 10\r\n  }\r\n\r\n  // 分页条件\r\n  pageable: Pageable = {\r\n    curr: this.pagination.current,\r\n    size: this.pagination.pageSize,\r\n    condition: {}\r\n  }\r\n\r\n  /**\r\n   * 页面挂载后\r\n   */\r\n  async mounted() {\r\n    // 加载组织机构根节点\r\n    const ret = await request.listNodes()\r\n    if (ret.code !== 0) {\r\n      message.error(ret.msg)\r\n      return false\r\n    }\r\n    this.treeData = this.toTreeDataItem(ret.data)\r\n    // 加载列表\r\n    this.pageQuery()\r\n  }\r\n\r\n  /**\r\n   * 加载节点数据\r\n   */\r\n  onLoadData(treeNode: TreeDataItem) {\r\n    return new Promise((resolve: (value?: unknown) => void) => {\r\n      if (treeNode.dataRef.children) {\r\n        resolve()\r\n        return false\r\n      }\r\n      request.listNodes(treeNode.dataRef.key as number).then((ret) => {\r\n        treeNode.dataRef.children = this.toTreeDataItem(ret.data)\r\n        this.treeData = [...this.treeData]\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  // 右键菜单 新建字典值\r\n  onContextMenuClick(node: TreeDataItem & {}) {\r\n    this.modalVisible = true\r\n    this.formData = {\r\n      name: '',\r\n      value: '',\r\n      parentId: node.key as number,\r\n      parentName: node.title as string\r\n    }\r\n    this.currentTreeNode = node\r\n  }\r\n\r\n  // 节点点击事件\r\n  onSelect(selectedKeys: string[], info: SelectEvent) {\r\n    console.log(selectedKeys, info)\r\n    this.pageable.condition.parentId = info.node.dataRef.key\r\n    this.pageQuery()\r\n  }\r\n\r\n  /** 转换树节点数据 */\r\n  toTreeDataItem(nodes: TreeNode[]) {\r\n    return nodes.map((node) => {\r\n      return {\r\n        key: node.id,\r\n        title: node.name,\r\n        code: node.code\r\n      } as TreeDataItem\r\n    })\r\n  }\r\n\r\n  // 转换单个树节点\r\n  toTreeDataItemOne(record: Dictionary) {\r\n    return {\r\n      key: record.id,\r\n      title: record.name,\r\n      code: record.code\r\n    } as TreeDataItem\r\n  }\r\n\r\n  // 查询树节点\r\n  loop(\r\n    data: TreeDataItem[],\r\n    key: number,\r\n    callback: (item: TreeDataItem, index: number, arr: TreeDataItem[]) => void\r\n  ) {\r\n    data.forEach((item, index, arr) => {\r\n      if (item.key === key) {\r\n        return callback(item, index, arr)\r\n      }\r\n      if (item.children) {\r\n        return this.loop(item.children, key, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 分页查询资源列表\r\n  async pageQuery() {\r\n    const result = await request.pageList(this.pageable)\r\n    if (result.code === 0) {\r\n      this.dataList = result.data.data\r\n      this.pagination.total = result.data.count\r\n    } else {\r\n      message.error(result.msg)\r\n    }\r\n  }\r\n\r\n  // 表格变动监听\r\n  handleTableChange(\r\n    pag: Pagination,\r\n    filters: TableStateFilters,\r\n    sorter: { field: string; order: string; columnKey: string }\r\n  ) {\r\n    this.pagination.current = pag?.current || 1\r\n    this.pageable.sortField = sorter.columnKey || ''\r\n    this.pageable.sortOrder = orderMap[sorter.order] || ''\r\n    this.pageable.condition.name =\r\n      filters.name instanceof Array ? filters.name[0] : ''\r\n    this.pageQuery()\r\n  }\r\n\r\n  /** 列表搜索 */\r\n  handleSearch(selectedKeys: string[], confirm: Function, dataIndex: string) {\r\n    confirm()\r\n    this.searchText = selectedKeys[0] || ''\r\n    this.searchedColumn = dataIndex\r\n  }\r\n\r\n  /** 查询条件重置 */\r\n  handleReset(clearFilters: Function) {\r\n    clearFilters()\r\n    this.searchText = ''\r\n  }\r\n\r\n  /** 字典模态框确定回调 */\r\n  async handleOk() {\r\n    const formUnref = unref(this.formRef)\r\n    formUnref &&\r\n      formUnref\r\n        .validate()\r\n        .then(async () => {\r\n          const data = { ...toRaw(this.formData) }\r\n          let ret: R<unknown>\r\n          if (!this.formData.id) {\r\n            ret = await request.add(data)\r\n          } else {\r\n            ret = await request.update(data)\r\n          }\r\n          if (ret.code === 0) {\r\n            this.modalVisible = false\r\n            this.loop(\r\n              this.treeData,\r\n              this.formData.id || this.formData.parentId || 0,\r\n              (node) => {\r\n                if (!this.currentTreeNode) {\r\n                    return false\r\n                }\r\n                if (this.formData.id) {\r\n                  node.title = data.name\r\n                  node.value = data.value\r\n                } else if (this.currentTreeNode.dataRef.children) {\r\n                  this.currentTreeNode.dataRef.children.push(\r\n                    this.toTreeDataItemOne({\r\n                      id: ret.data as number,\r\n                      ...data\r\n                    })\r\n                  )\r\n                } else {\r\n                  this.onLoadData(this.currentTreeNode)\r\n                }\r\n              }\r\n            )\r\n          } else {\r\n            message.error(ret.msg)\r\n          }\r\n        })\r\n        .catch((error: ValidateErrorEntity<Dictionary>) => {\r\n          console.log('error', error)\r\n        })\r\n  }\r\n\r\n  /** 删除权限 */\r\n  async onDictDel(record: Dictionary) {\r\n    const ret = await request.delete(record.id as number)\r\n    if (ret.code === 0) {\r\n      this.pageQuery()\r\n      this.loop(this.treeData, record.id as number, (item, index, arr) => {\r\n          arr.splice(index, 1)\r\n      })\r\n    } else {\r\n      message.error(`删除失败:${ret.msg}`)\r\n    }\r\n  }\r\n\r\n  // 编辑字典\r\n  onDictEdit(record: Dictionary) {\r\n    this.modalVisible = true\r\n    this.formData = record\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.a-layout {\r\n  height: 100%;\r\n}\r\n.a-layout-sider {\r\n  width: 250px;\r\n  overflow: auto;\r\n  background-color: #fff;\r\n}\r\n.a-layout-content {\r\n  padding: 5px 2px;\r\n  overflow: auto;\r\n}\r\n.highlight {\r\n  background-color: rgb(255, 192, 105);\r\n  padding: 0px;\r\n}\r\n</style>\r\n","import Page from '@/types/Page'\r\nimport Pageable from '@/types/Pageable'\r\nimport { Dictionary } from '@/types/Dictionary'\r\nimport { TreeNode } from '@/types/TreeNode'\r\nimport BaseRequest from './BaseRequest'\r\n\r\n/** 数据字典接口请求类 */\r\nexport class DictRequest extends BaseRequest {\r\n    /** 查询 */\r\n    find(id: number) {\r\n        return super.get<Dictionary>(`/dictionary/get/${id}`)\r\n    }\r\n\r\n    /** 删除 */\r\n    delete(id: number) {\r\n        return super.get(`/dictionary/delete/${id}`)\r\n    }\r\n\r\n    /** 添加资源 */\r\n    add(entity: Dictionary) {\r\n        return super.post('/dictionary/add', entity)\r\n    }\r\n\r\n    /** 更新资源 */\r\n    update(entity: Dictionary) {\r\n        return super.post('/dictionary/update', entity)\r\n    }\r\n\r\n    /** 获取权限子节点 */\r\n    listNodes(parentId?: number) {\r\n        return super.get<TreeNode[]>('/dictionary/list-nodes' + (parentId ? `?parentId=${parentId}` : ''))\r\n    }\r\n\r\n    /** 分页查询 */\r\n    pageList(pageable: Pageable) {\r\n        return super.post<Page<Dictionary>>('/dictionary/page', pageable)\r\n    }\r\n}\r\nconst request = new DictRequest()\r\nexport default request\r\n","\r\nimport { ref, toRaw, unref } from 'vue'\r\nimport { Options, Vue } from 'vue-class-component'\r\nimport { message } from 'ant-design-vue'\r\nimport { TreeDataItem, SelectEvent } from 'ant-design-vue/es/tree/Tree'\r\nimport { SearchOutlined } from '@ant-design/icons-vue'\r\nimport {\r\n  TableState,\r\n  TableStateFilters\r\n} from 'ant-design-vue/es/table/interface'\r\nimport { TreeNode } from '@/types/TreeNode'\r\nimport request from '@/request/DictRequest'\r\nimport Pageable from '@/types/Pageable'\r\nimport { Dictionary } from '@/types/Dictionary'\r\nimport Group from './Group.vue'\r\nimport { R } from '@/types/R'\r\nimport { ValidateErrorEntity } from 'ant-design-vue/es/form/interface'\r\n\r\n// 分页数据类型\r\ntype Pagination = TableState['pagination']\r\n// 排序映射\r\nconst orderMap: { [key: string]: string } = {\r\n  ascend: 'ASC',\r\n  descend: 'DESC'\r\n}\r\n@Options({\r\n  components: {\r\n    SearchOutlined,\r\n    Group\r\n  }\r\n})\r\nexport default class DictionaryVue extends Vue {\r\n  // 权限树数据源\r\n  treeData: TreeDataItem[] = []\r\n  // 字典Modal显示属性\r\n  modalVisible = false\r\n  // 表单数据\r\n  formData: Dictionary = {}\r\n\r\n  // 表单引用\r\n  formRef = ref<AntType.Form>()\r\n  // 验证规则\r\n  rules = {\r\n    name: [\r\n      { required: true, message: '请输入字典名称', trigger: 'blur' },\r\n      { max: 50, message: '角色名称最多50个字符' }\r\n    ],\r\n    value: [{ max: 50, message: '字典值最多50个字符' }]\r\n  }\r\n\r\n  // 权限列定义\r\n  columns = [\r\n    {\r\n      title: '序号',\r\n      dataIndex: 'number',\r\n      width: 100,\r\n      customRender: (info: {\r\n        text: string;\r\n        record: Dictionary;\r\n        index: number;\r\n      }) => {\r\n        return (this.pageable.curr - 1) * this.pageable.size + info.index + 1\r\n      }\r\n    },\r\n    {\r\n      title: '名称',\r\n      dataIndex: 'name',\r\n      width: 220,\r\n      slots: {\r\n        filterDropdown: 'filterDropdown',\r\n        filterIcon: 'filterIcon',\r\n        customRender: 'name'\r\n      },\r\n      onFilterDropdownVisibleChange: (visible: boolean) => {\r\n        if (visible) {\r\n          setTimeout(() => {\r\n            const searchInput = unref(this.searchInput)\r\n            searchInput && searchInput.focus()\r\n          }, 0)\r\n        }\r\n      }\r\n    },\r\n    { title: '字典值', dataIndex: 'value' },\r\n    { title: '父节点', dataIndex: 'parentName', width: 200 },\r\n    {\r\n      title: '创建时间',\r\n      dataIndex: 'createTime',\r\n      width: 200,\r\n      sorter: true,\r\n      key: 'create_time'\r\n    },\r\n    {\r\n      title: '操作',\r\n      dataIndex: 'operation',\r\n      width: 100,\r\n      slots: { customRender: 'operation' }\r\n    }\r\n  ]\r\n\r\n  // 当前操作树节点\r\n  currentTreeNode!: TreeDataItem;\r\n\r\n  // 表格数据\r\n  dataList: Dictionary[] = []\r\n\r\n  // 搜索\r\n  searchInput = ref<HTMLInputElement>()\r\n  searchText = ''\r\n  searchedColumn = ''\r\n\r\n  // 分页参数定义\r\n  pagination = {\r\n    total: 200,\r\n    current: 1,\r\n    pageSize: 10\r\n  }\r\n\r\n  // 分页条件\r\n  pageable: Pageable = {\r\n    curr: this.pagination.current,\r\n    size: this.pagination.pageSize,\r\n    condition: {}\r\n  }\r\n\r\n  /**\r\n   * 页面挂载后\r\n   */\r\n  async mounted() {\r\n    // 加载组织机构根节点\r\n    const ret = await request.listNodes()\r\n    if (ret.code !== 0) {\r\n      message.error(ret.msg)\r\n      return false\r\n    }\r\n    this.treeData = this.toTreeDataItem(ret.data)\r\n    // 加载列表\r\n    this.pageQuery()\r\n  }\r\n\r\n  /**\r\n   * 加载节点数据\r\n   */\r\n  onLoadData(treeNode: TreeDataItem) {\r\n    return new Promise((resolve: (value?: unknown) => void) => {\r\n      if (treeNode.dataRef.children) {\r\n        resolve()\r\n        return false\r\n      }\r\n      request.listNodes(treeNode.dataRef.key as number).then((ret) => {\r\n        treeNode.dataRef.children = this.toTreeDataItem(ret.data)\r\n        this.treeData = [...this.treeData]\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  // 右键菜单 新建字典值\r\n  onContextMenuClick(node: TreeDataItem & {}) {\r\n    this.modalVisible = true\r\n    this.formData = {\r\n      name: '',\r\n      value: '',\r\n      parentId: node.key as number,\r\n      parentName: node.title as string\r\n    }\r\n    this.currentTreeNode = node\r\n  }\r\n\r\n  // 节点点击事件\r\n  onSelect(selectedKeys: string[], info: SelectEvent) {\r\n    console.log(selectedKeys, info)\r\n    this.pageable.condition.parentId = info.node.dataRef.key\r\n    this.pageQuery()\r\n  }\r\n\r\n  /** 转换树节点数据 */\r\n  toTreeDataItem(nodes: TreeNode[]) {\r\n    return nodes.map((node) => {\r\n      return {\r\n        key: node.id,\r\n        title: node.name,\r\n        code: node.code\r\n      } as TreeDataItem\r\n    })\r\n  }\r\n\r\n  // 转换单个树节点\r\n  toTreeDataItemOne(record: Dictionary) {\r\n    return {\r\n      key: record.id,\r\n      title: record.name,\r\n      code: record.code\r\n    } as TreeDataItem\r\n  }\r\n\r\n  // 查询树节点\r\n  loop(\r\n    data: TreeDataItem[],\r\n    key: number,\r\n    callback: (item: TreeDataItem, index: number, arr: TreeDataItem[]) => void\r\n  ) {\r\n    data.forEach((item, index, arr) => {\r\n      if (item.key === key) {\r\n        return callback(item, index, arr)\r\n      }\r\n      if (item.children) {\r\n        return this.loop(item.children, key, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 分页查询资源列表\r\n  async pageQuery() {\r\n    const result = await request.pageList(this.pageable)\r\n    if (result.code === 0) {\r\n      this.dataList = result.data.data\r\n      this.pagination.total = result.data.count\r\n    } else {\r\n      message.error(result.msg)\r\n    }\r\n  }\r\n\r\n  // 表格变动监听\r\n  handleTableChange(\r\n    pag: Pagination,\r\n    filters: TableStateFilters,\r\n    sorter: { field: string; order: string; columnKey: string }\r\n  ) {\r\n    this.pagination.current = pag?.current || 1\r\n    this.pageable.sortField = sorter.columnKey || ''\r\n    this.pageable.sortOrder = orderMap[sorter.order] || ''\r\n    this.pageable.condition.name =\r\n      filters.name instanceof Array ? filters.name[0] : ''\r\n    this.pageQuery()\r\n  }\r\n\r\n  /** 列表搜索 */\r\n  handleSearch(selectedKeys: string[], confirm: Function, dataIndex: string) {\r\n    confirm()\r\n    this.searchText = selectedKeys[0] || ''\r\n    this.searchedColumn = dataIndex\r\n  }\r\n\r\n  /** 查询条件重置 */\r\n  handleReset(clearFilters: Function) {\r\n    clearFilters()\r\n    this.searchText = ''\r\n  }\r\n\r\n  /** 字典模态框确定回调 */\r\n  async handleOk() {\r\n    const formUnref = unref(this.formRef)\r\n    formUnref &&\r\n      formUnref\r\n        .validate()\r\n        .then(async () => {\r\n          const data = { ...toRaw(this.formData) }\r\n          let ret: R<unknown>\r\n          if (!this.formData.id) {\r\n            ret = await request.add(data)\r\n          } else {\r\n            ret = await request.update(data)\r\n          }\r\n          if (ret.code === 0) {\r\n            this.modalVisible = false\r\n            this.loop(\r\n              this.treeData,\r\n              this.formData.id || this.formData.parentId || 0,\r\n              (node) => {\r\n                if (!this.currentTreeNode) {\r\n                    return false\r\n                }\r\n                if (this.formData.id) {\r\n                  node.title = data.name\r\n                  node.value = data.value\r\n                } else if (this.currentTreeNode.dataRef.children) {\r\n                  this.currentTreeNode.dataRef.children.push(\r\n                    this.toTreeDataItemOne({\r\n                      id: ret.data as number,\r\n                      ...data\r\n                    })\r\n                  )\r\n                } else {\r\n                  this.onLoadData(this.currentTreeNode)\r\n                }\r\n              }\r\n            )\r\n          } else {\r\n            message.error(ret.msg)\r\n          }\r\n        })\r\n        .catch((error: ValidateErrorEntity<Dictionary>) => {\r\n          console.log('error', error)\r\n        })\r\n  }\r\n\r\n  /** 删除权限 */\r\n  async onDictDel(record: Dictionary) {\r\n    const ret = await request.delete(record.id as number)\r\n    if (ret.code === 0) {\r\n      this.pageQuery()\r\n      this.loop(this.treeData, record.id as number, (item, index, arr) => {\r\n          arr.splice(index, 1)\r\n      })\r\n    } else {\r\n      message.error(`删除失败:${ret.msg}`)\r\n    }\r\n  }\r\n\r\n  // 编辑字典\r\n  onDictEdit(record: Dictionary) {\r\n    this.modalVisible = true\r\n    this.formData = record\r\n  }\r\n}\r\n","import { render } from \"./Dictionary.vue?vue&type=template&id=f005ffae&scoped=true\"\nimport script from \"./Dictionary.vue?vue&type=script&lang=ts\"\nexport * from \"./Dictionary.vue?vue&type=script&lang=ts\"\n\nimport \"./Dictionary.vue?vue&type=style&index=0&id=f005ffae&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-f005ffae\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Dictionary.vue?vue&type=style&index=0&id=f005ffae&scoped=true&lang=css\""],"sourceRoot":""}